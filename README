CREATING PROTEIN PILEUPS FROM SHOTGUN SEQUENCING READS

Matt Rich (2017)

This workflow uses converts short-read shotgun sequencing data of a library of 
protein variants to a pileup showing the number of sequences at each
position that cause a nonsynonymous amino acid change. 

In this workflow, you perform some initial read-wrangling with existing trimming 
and aligning tools, then feed a SAM file into translate_sam.py, which creates a 
pileup of the translation (or simply codons). translate_sam.py does not consider 
linkage between mutations in the same read or read-pair (this information was 
retained in previous versions of the pipeline, though not used otherwise.) 

Briefly, the pipeline described below trims reads to a specific amplicon, attempts
to merge pairs as necessary, then aligns them to a reference. The merging step is 
important -- this makes sure that no reads are double-counted during analysis. All 
these steps can be performed as below or with what ever other tools you like. The 
input to translate_sam.py must be SAM files containing only aligned reads to only 
the sequence you wish to translate and pileup. 

This workflow requires one script -- translate_sam.py -- and the following packages:
	1) PEAR (v0.9.5)
	2) bowtie2 (v2.0.2+)
	3) pysam (v0.8.4) 
	4) cutadapt
	5) trim_galore

##STEP 1: MERGE AND ALIGN READS##

A) Use trim_galore (or just cutadapt or whatever read trimmer you like) to 
	remove nextera adapter sequences from the reads:

	trim_galore --length 20 --nextera INPUT.fq --paired --stringency 5

B) Use PEAR to merge overlapping reads

	pear -f INPUT_F.fq -r INPUT_R.fq -o PEAR_MERGED.fq

	PEAR will output three fastq files: one containing the merged reads, then one
	file for each of the forward and reverse reads that could not be merged. 
	NB: some of these reads will have very short overlaps -- I dealt with these in
	sam_to_fullFQ.py (this step is greedy, though, so it doesn't take any quality 
	scores into account). 

C) Align merged reads to reference with bowtie2
	
	(You'll need to use bowtie2-build to make this reference first, but I'm not
	including how to do that here. It's easy. Use a FASTA file that only contains
	your amplicon.)

	bowtie2 --end-to-end --no-unal -x REF -U PEAR_MERGED.fq -S PEAR_MERGED.sam

D) Align unmerged reads to reference with bowtie2
	
	(PEAR outputs the reverse read as its reverse-complement, so we have to use the
	--ff option for bowtie2. Also, we don't want any mixed or discordant reads).
	
	bowtie2 --no-discordant --no-mixed --end-to-end --no-unal --ff -x REF -1 PEAR_UNMERGED_F.fq -2 PEAR_UNMERGED_R.fq -S PEAR_UNMERGED.sam

	NB: this step can be done as a single-end or paired alignment, translate_sam
	doesn't care. 

##STEP 2: CREATE PILEUP

E) Use translate_sam.py to create and print pileup
	
	This script takes the aligned SAM files (or BAMs, if that's how you roll) as
	well as the reference FASTA file as input, and outputs a pileup of either codons 
	or amino acids at each codon position in the sequence.

	python translate_sam.py --wt REF.fa PEAR_UNMERGED.sam PEAR_MERGED.sam

	Input SAM files are positional arguments, and you can use as many as you want.

	There are a few options that you can use to change the pileup:
		--offset	offset for reference reading frame. If in frame, offset=0. If
			amplicon starts in second reading frame, offset=1. If amplicon starts 
			in third reading frame, offset=2. This can all be ignored simply by
			using an in-frame reference. 	

		--pileup	make pileup as amino acids (aa) or codons (codon). Codon is
			default.

		-q 	requires that the mean quality of a codon is above a threshold to be
			counted in the pileup. (Default = 2, so no filtering)
		
		--include-flank	Adds wildtype bases as necessary to ends of aligned reads to
			create full codons. By default, the script trims read ends to the first
			and last full codons, and I think that's a better way to do this (at
			least, there are some edge cases that break the script if you use this
			and I don't want to go in and try to address them). 

	The pileup is printed to STDOUT as a tab-delimited table.
